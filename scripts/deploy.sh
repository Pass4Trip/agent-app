#!/bin/bash

# Configuration
VPS_HOST="vps-af24e24d.vps.ovh.net"
VPS_IP="51.77.200.196"
VPS_USER="ubuntu"
REGISTRY_PORT="32000"
LOCAL_PATH="/Users/vinh/Documents/agent-app"

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${YELLOW}üöÄ D√©ploiement de l'API...${NC}"

# Nettoyer les images locales
echo -e "${YELLOW}üßπ Nettoyage des images locales...${NC}"
docker rmi -f agent-api ${VPS_IP}:${REGISTRY_PORT}/agent-api 2>/dev/null || true

# Build de l'image pour linux/amd64
echo -e "${YELLOW}üî® Build de l'image Docker...${NC}"
docker build --no-cache --platform linux/amd64 -t agent-api ${LOCAL_PATH}

# Tag de l'image pour le registry local
echo -e "${YELLOW}üè∑Ô∏è  Tag de l'image...${NC}"
docker tag agent-api ${VPS_IP}:${REGISTRY_PORT}/agent-api

# Push de l'image vers le registry
echo -e "${YELLOW}üì§ Push de l'image vers le registry...${NC}"
docker push ${VPS_IP}:${REGISTRY_PORT}/agent-api

# Nettoyer et pr√©parer le VPS
echo -e "${YELLOW}üßπ Pr√©paration du VPS...${NC}"
ssh -v ${VPS_USER}@${VPS_HOST} "
    set -x  # Mode debug pour afficher chaque commande
    
    echo 'üîç V√©rification des images existantes'
    microk8s ctr image ls | grep ${VPS_IP}:${REGISTRY_PORT}/agent-api || echo 'Aucune image trouv√©e'
    
    echo 'üóëÔ∏è Tentative de suppression des anciennes images'
    microk8s ctr image rm ${VPS_IP}:${REGISTRY_PORT}/agent-api 2>&1 || echo 'Aucune image √† supprimer'
    
    echo 'üì• V√©rification de la connectivit√© docker'
    docker info 2>&1
    
    echo 'üì¶ Tentative de pull de l\'image'
    docker pull ${VPS_IP}:${REGISTRY_PORT}/agent-api 2>&1
    PULL_STATUS=$?
    
    echo 'üî¨ Statut du pull : $PULL_STATUS'
    if [ $PULL_STATUS -eq 0 ]; then
        echo 'üö¢ Import de l\'image dans microk8s'
        docker save ${VPS_IP}:${REGISTRY_PORT}/agent-api | microk8s ctr image import - 2>&1
        IMPORT_STATUS=$?
        echo 'üî¨ Statut de l\'import : $IMPORT_STATUS'
        
        echo 'üìã V√©rification des images import√©es'
        microk8s ctr image ls | grep ${VPS_IP}:${REGISTRY_PORT}/agent-api
    else
        echo '‚ùå √âchec du pull de l\'image'
        exit 1
    fi
" 2>&1 | tee /tmp/vps_deploy.log

# Red√©ploiement du pod api
echo -e "${YELLOW}üîÑ Red√©ploiement de l'API...${NC}"
if ssh ${VPS_USER}@${VPS_HOST} "
    # Forcer le red√©ploiement
    microk8s kubectl rollout restart deployment agent-api
    microk8s kubectl rollout status deployment agent-api
"; then
    
    # V√©rification d√©taill√©e du pod
    echo -e "${YELLOW}üîç V√©rification du pod d√©ploy√©...${NC}"
    
    # R√©cup√©rer les d√©tails du pod
    POD_INFO=$(ssh ${VPS_USER}@${VPS_HOST} "microk8s kubectl get pods -l app=agent-api -o=jsonpath='{.items[0].metadata.name} {.items[0].status.containerStatuses[0].imageID} {.items[0].status.containerStatuses[0].image} {.items[0].metadata.creationTimestamp}'")
    
    echo -e "${YELLOW}D√©tails du pod :${NC}"
    echo "$POD_INFO" | awk '{print "Nom du pod: " $1 "\nImage ID: " $2 "\nImage: " $3 "\nDate de cr√©ation: " $4}'
    
    # Si le d√©ploiement est r√©ussi, commit et push
    echo -e "${YELLOW}üì¶ Sauvegarde des changements sur Git...${NC}"
    read -p "Message de commit: " COMMIT_MSG
    if [ ! -z "$COMMIT_MSG" ]; then
        git add .
        git commit -m "$COMMIT_MSG"
        
        # V√©rification du statut Git avant push
        echo -e "${YELLOW}üîç V√©rification du statut Git...${NC}"
        git status
        
        # Push avec affichage d√©taill√©
        echo -e "${YELLOW}üì§ Envoi sur GitHub...${NC}"
        git push -v origin feature/clean-start
        
        echo -e "${GREEN}‚úÖ Changements sauvegard√©s sur Git${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Pas de commit Git (message vide)${NC}"
    fi
    
    # V√©rifier la version d√©ploy√©e avec plus de d√©tails
    echo -e "${YELLOW}üìã Logs du pod :${NC}"
    ssh ${VPS_USER}@${VPS_HOST} "microk8s kubectl logs deployment/agent-api --tail=20"
    
    echo -e "${GREEN}‚úÖ D√©ploiement termin√© avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå √âchec du d√©ploiement${NC}"
    exit 1
fi
